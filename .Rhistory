ungroup() %>%
select(dep_delay, temp, pressure, visib, dewp, wind_speed, wind_gust, wind_dir, humid) %>%
ggpairs()
# carry out correlation plots between weather types and delayed flights
all_joined_imputed %>%
ungroup() %>%
select(delayed, delay_dep, wind_class, wind_direction) %>%
ggpairs()
all_joined_imputed %>%
filter(origin == "EWR") %>%
ggplot(aes(x = temp, y = delayed))+
geom_boxplot()+
theme_classic()+
labs(
x = "Temperature (F)",
y = "Delayed flights",
fill = "Departure delay"
)+
scale_fill_manual(values = c("#d7191c", "#fdae61", "#abd9e9", "#2c7bb6"))+
theme(axis.text=element_text(size=20))+
theme(text = element_text(size = 20))+
theme(plot.title = element_text(size = 20, hjust = 0.4))
all_joined_imputed %>%
filter(origin == "EWR") %>%
ggplot(aes(x = wind_gust, y = delayed))+
geom_boxplot()+
theme_classic()+
labs(
x = "Wind gusts (mph)",
y = "Delayed flights",
fill = "Departure delay"
)+
scale_fill_manual(values = c("#d7191c", "#fdae61", "#abd9e9", "#2c7bb6"))+
theme(axis.text=element_text(size=20))+
theme(text = element_text(size = 20))+
theme(plot.title = element_text(size = 20, hjust = 0.4))
all_joined_imputed %>%
filter(origin == "EWR") %>%
ggplot(aes(x = precip, y = delayed))+
geom_boxplot()+
theme_classic()+
labs(
x = "Precipitation (inches)",
y = "Delayed flights",
fill = "Departure delay"
)+
scale_fill_manual(values = c("#d7191c", "#fdae61", "#abd9e9", "#2c7bb6"))+
theme(axis.text=element_text(size=20))+
theme(text = element_text(size = 20))+
theme(plot.title = element_text(size = 20, hjust = 0.4))
all_joined_imputed %>%
filter(origin == "EWR") %>%
ggplot(aes(x = wind_speed, y = delayed))+
geom_boxplot()+
theme_classic()+
labs(
x = "Wind speed (mph)",
y = "Delayed flights",
fill = "Departure delay"
)+
scale_fill_manual(values = c("#d7191c", "#fdae61", "#abd9e9", "#2c7bb6"))+
theme(axis.text=element_text(size=20))+
theme(text = element_text(size = 20))+
theme(plot.title = element_text(size = 20, hjust = 0.4))
# comparison of impact of weather type on flight delays across all NY airports
all_joined_imputed %>%
group_by(wind_direction, delayed, airport) %>%
summarise(mean = mean(wind_speed)) %>%
ggplot(aes(x = wind_direction, y = mean, fill = delayed))+
geom_col(position = "dodge")+
theme_classic()+
facet_wrap(~airport)+
coord_flip()+
labs(
x = "Wind speed (mph)",
y = "Delayed flights",
fill = "Departure\ndelay",
title = "Effect of Wind Direction on Flight Delays from New York Airports"
)+
scale_fill_manual(values = c("#fdae61", "#2c7bb6"))+
theme(axis.text=element_text(size=16))+
theme(text = element_text(size = 14))+
theme(plot.title = element_text(size = 16, hjust = 0.4))
# comparison of all weather types effect on flight delays at Newark airport
avg_table <- all_joined_imputed %>%
filter(origin == "EWR") %>%
group_by(delayed) %>%
summarise(Temperature = mean(temp),
#pressure = mean(pressure, na.rm = TRUE),
Visibility = mean(visib, na.rm = TRUE),
Humidity = mean(humid, na.rm = TRUE),
#precip = mean(precip, na.rm = TRUE),
"Wind speed" = mean(wind_speed, na.rm = TRUE),
"Wind gust" = mean(wind_gust, na.rm = TRUE))
avg_table_pivot <- avg_table %>%
pivot_longer(cols = c(Temperature:"Wind gust"), names_to = "weather", values_to = "mean")
avg_table_pivot %>%
ggplot(aes(x = weather, y = mean, fill = delayed))+
geom_col(position = "dodge")+
theme_classic()+
labs(
y = "Mean weather",
title = "Impact of weather on flight delays from Newark airport",
fill = "Delayed"
)+
theme(axis.text=element_text(size=12))+
theme(text = element_text(size = 16))+
theme(plot.title = element_text(size = 16, hjust = 0.2))+
scale_fill_manual(values = c("#2c7bb6","#fdae61", "#abd9e9",  "#d7191c" ))
# compare destribution of average wind speed on flight delay in different airports
all_joined_imputed %>%
filter(delayed == TRUE) %>%
group_by(wind_speed, airport) %>%
summarise(mean = mean(dep_delay)) %>%
ggplot(aes(y = mean, x = wind_speed, colour = airport))+
geom_point()+
facet_grid(~airport)+
theme_classic()+
labs(
x = "Wind speed (mph)",
y = "Mean delay (minutes)",
title = "Average Flight Delay with Wind Speed at New York Airports"
)+
theme(axis.text=element_text(size=14))+
theme(text = element_text(size = 16))+
theme(plot.title = element_text(size = 16, hjust = 0.2))+
theme(legend.position="none")
# create new table with airport information, flight delays, destance
airport_table <- all_joined %>%
filter(origin == "EWR") %>%
group_by(name.y) %>%
summarise(count = n(),
delayed_flights = sum(delayed),
prop_delayed = delayed_flights/count,
airtime = mean(air_time),
distance = mean(distance)) %>%
arrange(desc(prop_delayed))
# add in additional information for latitude and long missing. Easier to do this in excel.
airports <- read_csv(here("clean_data/airports.csv"))
airport_table_latlong <- airport_table %>%
left_join(airports, by = c("name.y" ="name"))
write_csv(airport_table_latlong, "clean_data/airport_table_latlong.csv", append = FALSE)
airport_latlong_updated <- read_csv("clean_data/airport_table_latlong_updated.csv")
# plot correlation between how busy an airport is and the proportion of delayed flights
airport_latlong_updated %>%
ggplot(aes(x = count, y = prop_delayed))+
geom_point(colour = "steelblue")+
labs(
x = "Number of flights Airport",
y = "Proportion of delayed flights",
title = "Proportion of Delayed flights compared to Total Flights by Airport"
)+
theme(axis.text=element_text(size=14))+
theme(text = element_text(size = 16))+
theme(plot.title = element_text(size = 16, hjust = 0.7))
# add in category from quartiles for how good/bad the proportion of flight delays are. Also, create a colour palette for groups
airport_latlong_updated <- airport_latlong_updated %>%
mutate(delay_class = case_when(prop_delayed <= 0.31 ~ "1",
prop_delayed <= 0.3738 ~ "2",
prop_delayed <= 0.4143 ~ "3",
prop_delayed > 0.4143 ~ "4"))
pal <- colorFactor(
palette = c('green', 'blue', 'orange', 'red'),
domain = airport_latlong_updated$delay_class
)
size <- c()
# categorise how busy an airport is. Include a reasonable size range for leaflet
airport_latlong_updated <- airport_latlong_updated %>%
mutate(count_group = case_when(count < 500 ~"<500",
count < 1000 ~ "<1000",
count < 2000 ~ "<2000",
count < 3000 ~ "<3000",
count < 4000 ~ "<4000",
count < 5000 ~ "<5000",
count < 6000 ~ "<6000",
count < 7000 ~ "<7000",
count > 7000 ~ ">7000"))
airport_latlong_updated <- airport_latlong_updated %>%
mutate(count_sqrt = sqrt(count)/3)
# geospatial mapping of airport locations, flight delays and how busy the airports are
airport_latlong_trim <- airport_latlong_updated %>%
mutate(across(c(count, delayed_flights, lat, lon), as.numeric)) %>%
filter(!is.na(lat)) %>%
filter(!is.na(lon))
leaflet(airport_latlong_trim) %>%
addTiles() %>%
addCircleMarkers(lng = ~lon,
lat = ~lat,
weight = 1,
radius = ~airport_latlong_updated$count_sqrt,
color = ~pal(delay_class)) %>%
addLegend('bottomright', pal = pal, values = airport_latlong_updated$delay_class,
title = 'Proportion of<br>flights delayed',
opacity = 1)
# correlate the number of delayed flights to how busy an airport is
airport_latlong_updated %>%
ggplot(aes(x = count, y = delayed_flights))+
geom_point()+
geom_smooth()+
theme_classic()+
labs(
x = "Number of flights to Airport",
y = "Number of delayed flights",
title = "Number of Delayed flights compared to Total Flights by Airport"
)+
scale_fill_manual(values = c("#d7191c", "#fdae61", "#abd9e9", "#2c7bb6"))+
theme(axis.text=element_text(size=14))+
theme(text = element_text(size = 16))+
theme(plot.title = element_text(size = 16, hjust = 0.4))
# correlate the proportion of delayed flights to the distance to the destination
all_joined_imputed %>%
filter(delayed == TRUE,
origin == "EWR") %>%
group_by(distance, delayed) %>%
summarise(mean_delay = mean(dep_delay)) %>%
ggplot(aes(x = distance, y = mean_delay))+
geom_point(colour = "steelblue")+
theme_classic()+
labs(
x = "Distance of flight",
y = "Mean delay (minutes)",
title = "Average time delay versus distance of delayed flight from Newark Airport"
)+
theme(axis.text=element_text(size=14))+
theme(text = element_text(size = 16))+
theme(plot.title = element_text(size = 16, hjust = 0.2))+
ylim(0, 100)
flights_weather_planes_airlines <- read_csv("clean_data/flights_weather_planes_airlines.csv")
# convert variables to integers for plots
flights_weather_planes_airlines <- flights_weather_planes_airlines %>%
mutate(delayed = as.integer(delayed),
delayed_1hr_more = as.integer(delayed_1hr_more))
# Remove extra string in text variables
flights_weather_planes_airlines_regex <- flights_weather_planes_airlines %>%
mutate(name = str_remove(name, " Inc."),
name = str_remove(name, " Co"))
# plot percentage of flight delays for each airline
flights_weather_planes_airlines_regex %>%
group_by(name) %>%
summarise(count = n(),
mean_delay = mean(dep_delay),
perc_flights_delayed = sum(delayed)/count*100,
perc_flights_delayed_hr = sum(delayed_1hr_more)/count*100) %>%
arrange(desc(perc_flights_delayed)) %>%
ggplot(aes(x = reorder(name, perc_flights_delayed), y = perc_flights_delayed, ))+
geom_col(fill = "steelblue")+
coord_flip()+
theme_classic()+
labs(
y = "Percentage flights delayed",
title = "Percentage Flight Delays by Airline"
)+
theme(axis.text=element_text(size=14))+
theme(text = element_text(size = 16))+
theme(axis.title.y=element_blank())+
theme(plot.title = element_text(size = 20, hjust = -0.4))
# correlation between departure time and arrival time for delayed flights. ie do delayed flights catch up time during journey.
flights_clean %>%
filter(delayed == "TRUE") %>%
drop_na(arr_delay) %>%
drop_na(dep_delay) %>%
ggplot(aes(x = dep_delay, y = arr_delay))+
geom_point()+
geom_smooth()
# plot flight delays by month
all_joined_imputed%>%
filter(origin == "EWR") %>%
group_by(month, delay_dep) %>%
summarise(mean_delay = mean(dep_delay),
count = n())%>%
ggplot()+
geom_col(aes(x = month, y = count, fill = factor(delay_dep, levels = c("> 1hr delay", "< 1hr delay","< 15 minutes delay",  "Early or on-time"))), position = "fill")+
theme_classic()+
labs(
x = "Month",
y = "Proportion of delayed flights",
title = "Proportion of Delayed Flights by Month from Newark",
fill = "Departure delay"
)+
scale_fill_manual(values = c("#d7191c", "#fdae61", "#abd9e9", "#2c7bb6"))+
theme(axis.text=element_text(size=14))+
theme(text = element_text(size = 16))+
theme(plot.title = element_text(size = 16, hjust = 0.2))+
scale_x_continuous(breaks=seq(1,12,1))
# plot flight delays by time of the day
all_joined_imputed%>%
filter(origin == "EWR") %>%
group_by(hour, delay_dep) %>%
summarise(mean_delay = mean(dep_delay),
count = n())%>%
ggplot()+
geom_col(aes(x = hour, y = count, fill = factor(delay_dep, levels = c("> 1hr delay", "< 1hr delay","< 15 minutes delay",  "Early or on-time"))), position = "fill")+
theme_classic()+
labs(
x = "Hour",
y = "Proportion of delayed flights",
title = "Flight Delay by Hour from Newark Airport",
fill = "Departure delay"
)+
scale_fill_manual(values = c("#d7191c", "#fdae61", "#abd9e9", "#2c7bb6"))+
theme(axis.text=element_text(size=14))+
theme(text = element_text(size = 16))+
theme(plot.title = element_text(size = 16, hjust = 1))
# compare flight delays by hour across all three New York airports
flights_clean %>%
group_by(hour,origin) %>%
summarise(mean_delay = mean(dep_delay)) %>%
ggplot(aes(x = hour, y = mean_delay, colour = origin))+
geom_point()+
geom_line()+
theme_classic()+
labs(
x = "Hour",
y = "Average flight delay (minutes)",
title = "Average Flight Delay by Hour from New York Airports",
fill = "Airport"
)+
scale_colour_manual(values = c("#d7191c", "#fdae61", "#abd9e9", "#2c7bb6"))+
theme(axis.text=element_text(size=14))+
theme(text = element_text(size = 16))+
theme(plot.title = element_text(size = 16, hjust = 1))+
scale_x_continuous(breaks = seq(0, 24, 2))
ewr_fit <- all_joined_imputed %>%
filter(origin == "EWR") %>%
ungroup()
ewr_fit <- ewr_fit %>%
mutate(time_of_day = case_when(hour <= 6 ~ "night",
hour <= 12 ~ "morning",
hour <= 18 ~ "afternoon",
hour <= 24 ~ "evening"),
visibility = if_else(visib >= 5, "good", "poor"))
ewr_fit_dt <- ewr_fit %>%
select(delayed, month, time_of_day, distance, wind_direction, wind_class, temp, visibility, wind_gust, precip) %>%
mutate(delayed = as.factor(delayed)) %>%
na.omit()
ewr_fit_dt
# test train split set up
n_data <- nrow(ewr_fit_dt)
test_index <- sample(1:n_data, size = n_data*0.2)
ewr_test <- slice(ewr_fit_dt, test_index)
ewr_train <- slice(ewr_fit_dt, -test_index)
ewr_test %>%
janitor::tabyl(delayed)
ewr_train %>%
janitor::tabyl(delayed)
# fit data to tree
ewr_fit_tree <- rpart(
formula = delayed ~.,
data = ewr_train,
method = "class"
)
rpart.plot(ewr_fit_tree,
yesno = 2,
fallen.leaves = TRUE,
faclen = 6,
digits = 2,
type = 4,
extra = 101)
rpart.rules(ewr_fit_tree, cover = TRUE)
# add predictions to test the model
ewr_test_pred <- ewr_test %>%
add_predictions(ewr_fit_tree, type = "class")
ewr_test_pred %>%
select(time_of_day, month, delayed, pred)
# confusion matrix to evaluate model
conf_mat <- ewr_test_pred %>%
conf_mat(truth = delayed, estimate = pred)
conf_mat
accuracy <- ewr_test_pred %>%
accuracy(truth = delayed, estimate = pred)
accuracy
confusionMatrix(ewr_test_pred$pred, ewr_test_pred$delayed)
ewr_fit %>%
summary
ewr_trim <- ewr_fit %>%
select(month, day, delayed, air_time, distance, hour, temp, wind_direction, wind_speed, wind_class, wind_gust, visibility, year.y, type, manufacturer, model, engines, seats, engine, name.x, lat, lon, alt, tz) %>%
na.omit()
ewr_trim
rf_classifier <- ranger(delayed ~ .,
data = ewr_trim,
importance = "impurity",
num.trees = 1000,
mtry = 2,
min.node.size = 5)
rf_classifier
# view varibles with importance value
sort(importance(rf_classifier))
# set up the dataset
all_joined_model <- all_joined_imputed %>%
select(date, time, delayed, hour)
n_data <- nrow(all_joined_model)
delay_index <- sample(1:n_data, size = n_data*0.2)
delay_test <- slice(all_joined_model, test_index)
delay_train <- slice(all_joined_model, -test_index)
delay_test %>%
janitor::tabyl(delayed)
delay_train%>%
janitor::tabyl(delayed)
delayed_1log_reg <- glm(delayed ~ hour,
data = delay_train,
family = binomial(link = "logit"))
delayed_1log_reg
test_1log_reg <- glm(delayed ~ hour,
data = delay_test,
family = binomial(link = "logit"))
# add predictions
predict_log <- tibble(hour = seq(0, 24, 0.5)) %>%
add_predictions(delayed_1log_reg,
type = "response")
predict_log
delay_train %>%
ggplot(aes(x = hour, y = as.integer(delayed))) +
geom_jitter(position = position_jitter(h = 0.1), shape = 1)+
geom_line(data = predict_log,
aes(y = pred),
col = "red")+
labs(title = "Probability of Flight Delay Based on Hour",
y = "Probability",
x = "Hour")+
theme_classic()+
theme(axis.text=element_text(size=14))+
theme(text = element_text(size = 16))+
theme(plot.title = element_text(size = 16, hjust = 0.2))+
scale_x_continuous(breaks=seq(0,24,2))
tidy_out <- clean_names(tidy(delayed_1log_reg))
tidy_out
tidy_test <- clean_names(tidy(test_1log_reg))
tidy_test
summary(delayed_1log_reg)
delay_train_with_1pred <- delay_train %>%
add_predictions(delayed_1log_reg, type = "response")
delay_train_1pred %>%
ggplot(aes(x = hour, y = pred, colour = delayed))+
geom_line()
delay_train_with_1pred <- delay_train %>%
add_predictions(delayed_1log_reg, type = "response")
delay_train_with_1pred %>%
ggplot(aes(x = hour, y = pred, colour = delayed))+
geom_line()
test_with_1pred <- delay_test %>%
add_predictions(delayed_1log_reg, type = "response")
test_with_1pred %>%
ggplot(aes(x = hour, y = pred, colour = delayed))+
geom_line()
roc_obj_1pred <- delay_train_with_1pred %>%
roc(response = delayed,
predictor = pred)
auc(roc_obj_1pred)
roc_obj_test1pred <- test_with_1pred %>%
roc(response = delayed,
predictor = pred)
auc(roc_obj_test1pred)
roc_curve <- ggroc(data = list(
mod1 = roc_obj_1pred,
mod2 = roc_obj_test1pred),
legacy.axes = TRUE)+
coord_fixed()+
labs(x = "FPR = 1 - TNR = 1 - specificity",
y = "TPR = sensitivity")
roc_curve
flights <- read_csv(here("raw_data/flights.csv"))
View(flights)
flights %>%
class()
flights %>%
names()
flights %>%
headings()
flights %>%
heading()
flights %>%
list()
flights %>%
print(list())
(list()19
(list(19)
flights %>%
flights %>%
list()
library(tidyverse)
flights <- read_csv(here("raw_data/flights.csv"))
airports <- read_csv(here("raw_data/airports.csv"))
airlines <- read_csv(here("raw_data/airlines.csv"))
weather <- read_csv(here("raw_data/weather.csv"))
planes <- read_csv(here("raw_data/planes.csv"))
flights %>%
list()
weather %>%
list()
flights %>%
summary()
weather %>%
summary()
airport %>%
list()
airports %>%
list()
airports %>%
summary()
View(weather)
weather %>%
summary()
airlines %>%
list()
airlines %>%
list()
planes %>%
list()
planes %>%
summary()
airlines %>%
list()
